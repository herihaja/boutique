{% extends 'base-breadcrumb.html.twig' %}

{% block titre %}Tableau de bord{% endblock %}

{% block breadcrumb %}
    {% set breadcrumb = {'main': app_name, 
        'no-link': block('titre')} %}
    {% include "breadcrumb.html.twig" %}
{% endblock %}

{% block block_js %}
<!--  Charts Plugin -->
	<script src="/static/js/chartist.min.js"></script>
    <script src="/static/js/plugins/chartist-plugin-legend.js"></script>
    <script type="text/javascript">
    
    	$(document).ready(function(){
            var agentsData = {
                    labels: ['En mission (2)', 'Non disponible (4)', 'Disponible (1)'],
                    series: [2, 4, 1]
                    };
            var rcData = {
                    labels: ['En preparation (2)', 'En cours (2)', 'Réalisées (12)'],
                    series: [2, 2, 12]
                    };
            var pieOptions = {
                animationEnabled: true,
                donut: true,
                showLabel: true,
                plugins: [
                    Chartist.plugins.legend(),
                ],
                labelInterpolationFnc: function(value) {
                    return value
                },
                height: 200,
                axisY: {
                    // Lets offset the chart a bit from the labels
                    offset: 70
                }
	        };
            //Chartist.Pie('#agentsPie', agentsData, pieOptions );
            //Chartist.Pie('#rcPie', rcData, pieOptions );

            var data = {
                labels: ["{{ frequenceVente[1]|raw }}"],//['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                series: JSON.parse('{{ frequenceVente[0] | json_encode | raw }}')
            };

            var stockData = {
                labels: ["{{ stockAndSales[1]|raw }}"],
                series: JSON.parse('{{ stockAndSales[0] | json_encode | raw }}')
            };

            var options = {
                seriesBarDistance: 30,
                animationEnabled: true,
                plugins: [Chartist.plugins.legend({
                    position: 'bottom'
                })],
                axisY: {
                    // Lets offset the chart a bit from the labels
                    offset: 70
                }
            };
            var responsiveOptions = [
                ['screen and (max-width: 640px)', {
                    seriesBarDistance: 5,
                    axisX: {
                    labelInterpolationFnc: function (value) {
                        return value[0];
                    }
                    }
                }]
            ];

            const drawFunction = (data) => {
                
                if(data.type == 'bar') {
                    data.element.animate({
                        y2: {
                            dur: '0.5s',
                            from: data.y1,
                            to: data.y2
                        }
                    });
                }
                if (data.type === 'line') {
                    data.element.animate({
                        opacity: {
                            dur: 1000,
                            from: 0,
                            to: 1
                        },
                        x1: {
                            dur: '1000ms',
                            from: 100,
                            to: 200,
                            easing: 'easeOutQuart'
                        },
                        y1: {
                            dur: '2s',
                            from: 0,
                            to: 100
                        }
                    });
                }
            }

            var chart = new Chartist.Bar('#frequenceVente', data, options, responsiveOptions);
            chart.on('draw', drawFunction);

            var chart = new Chartist.Bar('#stockAndSales', stockData, options, responsiveOptions);
            chart.on('draw', drawFunction);

            var salesData = {
                labels: ["{{ salesData[1]|raw }}"],
                series: JSON.parse('{{ salesData[0] | json_encode | raw }}')
            };

            var chart  = new Chartist.Line('#salesChart', salesData, {
                low: 0,
                showArea: true,
                axisY: {
                    // Lets offset the chart a bit from the labels
                    offset: 70,
                    // The label interpolation function enables you to modify the values
                    // used for the labels on each axis. Here we are converting the
                    // values into million pound.
                    labelInterpolationFnc: function(value) {
                        //if (value > 1000)
                        //    return '' + (value/1000) + 'm';
                        return value;
                    }
                }
            });
            chart.on('draw', drawFunction);


            /*
            chart.on('draw', function(data) {
                if(data.type === 'slice') {
                    // Get the total path length in order to use for dash array animation
                    var pathLength = data.element._node.getTotalLength();

                    // Set a dasharray that matches the path length as prerequisite to animate dashoffset
                    data.element.attr({
                    'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
                    });

                    // Create animation definition while also assigning an ID to the animation for later sync usage
                    var animationDefinition = {
                    'stroke-dashoffset': {
                        id: 'anim' + data.index,
                        dur: 1000,
                        from: -pathLength + 'px',
                        to:  '0px',
                        easing: Chartist.Svg.Easing.easeOutQuint,
                        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
                        fill: 'freeze'
                    }
                    };

                    // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
                    if(data.index !== 0) {
                    animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
                    }

                    // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
                    data.element.attr({
                    'stroke-dashoffset': -pathLength + 'px'
                    });

                    // We can't use guided mode as the animations need to rely on setting begin manually
                    // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
                    data.element.animate(animationDefinition, false);
                }
            });
            */
        });
	</script>
{% endblock %}


{% block contenu %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    
    <b>CA journalier:</b>
    <div id="salesChart">
    </div>
    <br/><br/>
    <b>Fréquence de ventes (Les 30 derniers jours):</b>
    <div id="frequenceVente">
    </div>
    <br/><br/>
    <b>Comparaison stock et vente (Les 7 derniers jours):</b>
    <div id="stockAndSales">
    </div>
</div>
{% endblock %}
