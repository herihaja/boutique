security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\AuthUser
                property: username
        # used to reload user from session & other features (e.g. switch_user)
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #anonymous: true
            custom_authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: /logout
                target: /login
            

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/mot-de-passe-oublie$, roles: PUBLIC_ACCESS }
        - { path: ^/re-initialiser-mot-de-passe/*, roles: PUBLIC_ACCESS }
        - { path: ^/produit/approvisionnement, roles: [ROLE_ADMINISTRATEUR, ROLE_AGENT_APPRO] }
        - { path: ^/produit/list, roles: [ROLE_ADMINISTRATEUR, ROLE_AGENT_APPRO, ROLE_CAISSIER(E)] }
        - { path: ^/caisse, roles: [ROLE_ADMINISTRATEUR, ROLE_CAISSIER(E)] }
        - { path: ^/produit/*, roles: ROLE_ADMINISTRATEUR }
        - { path: ^/parametre/*, roles: ROLE_ADMINISTRATEUR }
        - { path: ^/parametre-valeur/*, roles: ROLE_ADMINISTRATEUR }
        - { path: ^/utilisateur/reset-password, roles: IS_AUTHENTICATED_REMEMBERED}
        - { path: ^/utilisateur/edit-profile, roles: IS_AUTHENTICATED_REMEMBERED}
        - { path: ^/utilisateur/*, roles: ROLE_ADMINISTRATEUR}
        - { path: ^/*, roles: IS_AUTHENTICATED_REMEMBERED}
        #- { path: ^/./$, roles: IS_AUTHENTICATED}
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }       

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
